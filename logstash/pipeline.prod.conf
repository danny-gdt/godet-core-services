# Configuration Logstash pour la production avec Elasticsearch

# Entrée : On écoute les logs envoyés via le protocole GELF
input {
  gelf {}
}

filter {
  # Parser le message JSON de pino
  json {
    source => "message"
  }
  
  # Ajouter des métadonnées pour la production
  mutate {
    add_field => {
      "environment" => "production"
      "service" => "auth-service"
    }
  }
  
  # Traitement des champs de requête et réponse
  if [req] {
    mutate {
      add_field => {
        "request_method" => "%{[req][method]}"
        "request_url" => "%{[req][url]}"
        "request_id" => "%{[req][id]}"
      }
    }
  }
  
  if [res] {
    mutate {
      add_field => {
        "response_status" => "%{[res][statusCode]}"
        "response_time" => "%{[res][responseTime]}"
      }
    }
  }
  
  # Ajouter un timestamp si nécessaire
  if [time] {
    date {
      match => [ "time", "UNIX_MS" ]
      target => "@timestamp"
    }
  }
}

# Sortie : On envoie les logs vers Elasticsearch
output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "godet-services-prod-%{+YYYY.MM.dd}"
    template_name => "godet-services-prod"
    template_overwrite => true
    template => {
      "index_patterns" => ["godet-services-prod-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "msg" => { "type" => "text" }
          "service" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "request_method" => { "type" => "keyword" }
          "request_url" => { "type" => "text" }
          "request_id" => { "type" => "keyword" }
          "response_status" => { "type" => "integer" }
          "response_time" => { "type" => "integer" }
        }
      }
    }
  }
  
  # Sortie de debug pour les erreurs (optionnel)
  if [level] == "error" {
    stdout {
      codec => rubydebug
    }
  }
} 