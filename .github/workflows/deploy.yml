name: Deploy to AWS ECS

on:
  push:
    branches: main
  pull_request:
    branches: main

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: godet-core-services
  ECS_CLUSTER: godet-core-services-cluster
  ECS_SERVICE: auth-service-prod
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  ACTIONS_DEBUG: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f auth-service/Dockerfile .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f auth-service/Dockerfile .
          
          # Push the images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Save the image URI for the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Prepare task definition
        id: prepare-task-def
        run: |
          # On remplace les placeholders dans notre template par les vraies valeurs
          sed -i "s|IMAGE_URI_PLACEHOLDER|${{ steps.build-image.outputs.image }}|g" ecs-task-definition.json
          sed -i "s|SECRET_ARN_PLACEHOLDER|${{ secrets.AWS_SECRETS_MANAGER_ARN }}|g" ecs-task-definition.json
          sed -i "s|ACCOUNT_ID|${{ secrets.AWS_ACCOUNT_ID }}|g" ecs-task-definition.json

      - name: Check if ECS service exists
        id: check-service
        run: |
          # V√©rifier si le service existe
          if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text | grep -q "ACTIVE"; then
            echo "service-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Service ${{ env.ECS_SERVICE }} existe d√©j√†"
          else
            echo "service-exists=false" >> $GITHUB_OUTPUT
            echo "üìù Service ${{ env.ECS_SERVICE }} n'existe pas"
          fi

      - name: Create ECS service if it doesn't exist
        if: steps.check-service.outputs.service-exists == 'false'
        run: |
          echo "üöÄ Cr√©ation du service ECS ${{ env.ECS_SERVICE }}..."
          
          # Cr√©er le service ECS
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition godet-auth-service \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
            --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ Service ${{ env.ECS_SERVICE }} cr√©√© avec succ√®s"

      - name: Deploy Amazon ECS task definition
        if: steps.check-service.outputs.service-exists == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Update ECS service with new task definition
        if: steps.check-service.outputs.service-exists == 'false'
        run: |
          echo "üîÑ Mise √† jour du service avec la nouvelle task definition..."
          
          # Mettre √† jour le service avec la nouvelle task definition
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition godet-auth-service \
            --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ Service mis √† jour avec succ√®s"

      - name: Wait for service stability
        run: |
          echo "‚è≥ Attente de la stabilit√© du service..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}
          echo "‚úÖ Service stable"

      - name: Run database migrations
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Run migrations using ECS CLI
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition godet-auth-service \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
            --overrides '{"containerOverrides":[{"name":"auth-service","command":["pnpm","exec","prisma","migrate","deploy"]}]}'

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment successful!"
            echo "Services deployed:"
            echo "- Auth Service: http://your-alb-domain:3000"
            echo "- Kibana: http://your-alb-domain:5601"
            echo "- Elasticsearch: http://your-alb-domain:9200"
          else
            echo "‚ùå Deployment failed!"
          fi 