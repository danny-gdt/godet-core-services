name: Deploy to AWS ECS

on:
  push:
    branches: main
  pull_request:
    branches: main

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: godet-core-services
  ECS_CLUSTER: godet-core-services-cluster
  ECS_SERVICE: auth-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f auth-service/Dockerfile .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f auth-service/Dockerfile .
          
          # Push the images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Save the image URI for the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create ECS task definition from docker-compose
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
        run: |
          # Install AWS ECS CLI
          curl -o /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
          chmod +x /usr/local/bin/ecs-cli
          
          # Create task definition from docker-compose
          ecs-cli compose --file docker-compose.ecs.yml \
            --project-name godet-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --ecs-params ecs-params.yml \
            create

      - name: Deploy to ECS using docker-compose
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.ARN_SECRET_MANAGER:DATABASE_URL }}
          REDIS_URL: ${{ secrets.ARN_SECRET_MANAGERREDIS_URL }}
          FRONTEND_URL: ${{ secrets.ARN_SECRET_MANAGER:FRONTEND_URL }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ARN_SECRET_MANAGER:ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.ARN_SECRET_MANAGER:REFRESH_TOKEN_SECRET }}
        run: |
          # Deploy using ECS CLI
          ecs-cli compose --file docker-compose.ecs.yml \
            --project-name godet-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --ecs-params ecs-params.yml \
            service up --force-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services godet-services

      - name: Run database migrations
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.ARN_SECRET_MANAGER:DATABASE_URL }}
          REDIS_URL: ${{ secrets.ARN_SECRET_MANAGER:REDIS_URL }}
          FRONTEND_URL: ${{ secrets.ARN_SECRET_MANAGER:FRONTEND_URL }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ARN_SECRET_MANAGER:ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.ARN_SECRET_MANAGER:REFRESH_TOKEN_SECRET }}
        run: |
          # Run migrations using ECS CLI
          ecs-cli compose --file docker-compose.ecs.yml \
            --project-name godet-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --ecs-params ecs-params.yml \
            run --rm auth-service pnpm exec prisma migrate deploy

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
            echo "Services deployed:"
            echo "- Auth Service: http://your-alb-domain:3000"
            echo "- Kibana: http://your-alb-domain:5601"
            echo "- Elasticsearch: http://your-alb-domain:9200"
          else
            echo "❌ Deployment failed!"
          fi 